// This file is @generated by prost-build.
/// Core data types
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fact {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(map = "string, message", tag = "2")]
    pub data: ::std::collections::HashMap<::prost::alloc::string::String, Value>,
    /// Unix timestamp
    #[prost(int64, tag = "3")]
    pub created_at: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Value {
    #[prost(oneof = "value::Value", tags = "1, 2, 3, 4")]
    pub value: ::core::option::Option<value::Value>,
}
/// Nested message and enum types in `Value`.
pub mod value {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(string, tag = "1")]
        StringValue(::prost::alloc::string::String),
        #[prost(double, tag = "2")]
        NumberValue(f64),
        #[prost(bool, tag = "3")]
        BoolValue(bool),
        #[prost(int64, tag = "4")]
        IntValue(i64),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Rule {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub conditions: ::prost::alloc::vec::Vec<Condition>,
    #[prost(message, repeated, tag = "5")]
    pub actions: ::prost::alloc::vec::Vec<Action>,
    #[prost(int32, tag = "6")]
    pub priority: i32,
    #[prost(bool, tag = "7")]
    pub enabled: bool,
    #[prost(string, repeated, tag = "8")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int64, tag = "9")]
    pub created_at: i64,
    #[prost(int64, tag = "10")]
    pub updated_at: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Condition {
    #[prost(oneof = "condition::ConditionType", tags = "1, 2")]
    pub condition_type: ::core::option::Option<condition::ConditionType>,
}
/// Nested message and enum types in `Condition`.
pub mod condition {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ConditionType {
        #[prost(message, tag = "1")]
        Simple(super::SimpleCondition),
        #[prost(message, tag = "2")]
        Complex(super::ComplexCondition),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SimpleCondition {
    #[prost(string, tag = "1")]
    pub field: ::prost::alloc::string::String,
    #[prost(enumeration = "SimpleOperator", tag = "2")]
    pub operator: i32,
    #[prost(message, optional, tag = "3")]
    pub value: ::core::option::Option<Value>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComplexCondition {
    #[prost(enumeration = "LogicalOperator", tag = "1")]
    pub operator: i32,
    #[prost(message, repeated, tag = "2")]
    pub conditions: ::prost::alloc::vec::Vec<Condition>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Action {
    #[prost(oneof = "action::ActionType", tags = "1, 2, 3")]
    pub action_type: ::core::option::Option<action::ActionType>,
}
/// Nested message and enum types in `Action`.
pub mod action {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ActionType {
        #[prost(message, tag = "1")]
        CreateFact(super::CreateFactAction),
        #[prost(message, tag = "2")]
        CallCalculator(super::CallCalculatorAction),
        #[prost(message, tag = "3")]
        Formula(super::FormulaAction),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateFactAction {
    #[prost(map = "string, message", tag = "1")]
    pub fields: ::std::collections::HashMap<::prost::alloc::string::String, Value>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CallCalculatorAction {
    #[prost(string, tag = "1")]
    pub calculator_name: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "2")]
    pub input_mapping: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "3")]
    pub output_field: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FormulaAction {
    #[prost(string, tag = "1")]
    pub formula: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "2")]
    pub variable_mapping: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "3")]
    pub output_field: ::prost::alloc::string::String,
}
/// Request/Response messages
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProcessFactsRequest {
    #[prost(message, repeated, tag = "1")]
    pub facts: ::prost::alloc::vec::Vec<Fact>,
    #[prost(message, repeated, tag = "2")]
    pub rules: ::prost::alloc::vec::Vec<Rule>,
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub options: ::core::option::Option<ProcessingOptions>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProcessingOptions {
    #[prost(bool, tag = "1")]
    pub enable_incremental: bool,
    #[prost(int32, tag = "2")]
    pub batch_size: i32,
    #[prost(int32, tag = "3")]
    pub memory_limit_mb: i32,
    /// Only return results matching these patterns
    #[prost(string, repeated, tag = "4")]
    pub result_filters: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RuleExecutionResult {
    #[prost(string, tag = "1")]
    pub rule_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub rule_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub matched_fact: ::core::option::Option<Fact>,
    #[prost(message, repeated, tag = "4")]
    pub action_results: ::prost::alloc::vec::Vec<ActionResult>,
    #[prost(int64, tag = "5")]
    pub execution_time_ns: i64,
    #[prost(map = "string, string", tag = "6")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionResult {
    #[prost(string, tag = "1")]
    pub action_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    #[prost(oneof = "action_result::Result", tags = "4, 5, 6")]
    pub result: ::core::option::Option<action_result::Result>,
}
/// Nested message and enum types in `ActionResult`.
pub mod action_result {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Result {
        #[prost(message, tag = "4")]
        CreatedFact(super::Fact),
        #[prost(message, tag = "5")]
        CalculatedValue(super::Value),
        #[prost(string, tag = "6")]
        FormulaResult(::prost::alloc::string::String),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProcessingStatus {
    #[prost(string, tag = "1")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub facts_processed: i32,
    #[prost(int32, tag = "3")]
    pub rules_executed: i32,
    #[prost(int32, tag = "4")]
    pub results_generated: i32,
    #[prost(int64, tag = "5")]
    pub processing_time_ms: i64,
    #[prost(bool, tag = "6")]
    pub completed: bool,
    #[prost(string, tag = "7")]
    pub error_message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterRulesetRequest {
    #[prost(string, tag = "1")]
    pub ruleset_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub rules: ::prost::alloc::vec::Vec<Rule>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterRulesetResponse {
    #[prost(string, tag = "1")]
    pub ruleset_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub ruleset_hash: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub rules_compiled: i32,
    #[prost(bool, tag = "4")]
    pub success: bool,
    #[prost(string, tag = "5")]
    pub error_message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvaluateRulesetRequest {
    #[prost(string, tag = "1")]
    pub ruleset_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub facts: ::prost::alloc::vec::Vec<Fact>,
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub options: ::core::option::Option<ProcessingOptions>,
}
/// Two-phase processing messages
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompileRulesRequest {
    #[prost(message, repeated, tag = "1")]
    pub rules: ::prost::alloc::vec::Vec<Rule>,
    /// Links compilation to subsequent fact processing
    #[prost(string, tag = "2")]
    pub session_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub options: ::core::option::Option<ProcessingOptions>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompileRulesResponse {
    #[prost(string, tag = "1")]
    pub session_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub rules_compiled: i32,
    #[prost(int32, tag = "5")]
    pub network_nodes_created: i32,
    #[prost(int64, tag = "6")]
    pub compilation_time_ms: i64,
    #[prost(string, tag = "7")]
    pub engine_version: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProcessFactsStreamRequest {
    #[prost(oneof = "process_facts_stream_request::Request", tags = "1, 2, 3")]
    pub request: ::core::option::Option<process_facts_stream_request::Request>,
}
/// Nested message and enum types in `ProcessFactsStreamRequest`.
pub mod process_facts_stream_request {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Request {
        /// Reference to compiled rules session
        #[prost(string, tag = "1")]
        SessionId(::prost::alloc::string::String),
        /// Individual fact or batch of facts
        #[prost(message, tag = "2")]
        FactBatch(super::Fact),
        /// Control messages (pause, resume, stop)
        #[prost(message, tag = "3")]
        Control(super::ProcessingControl),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProcessingControl {
    #[prost(enumeration = "processing_control::ControlType", tag = "1")]
    pub r#type: i32,
    #[prost(string, tag = "2")]
    pub reason: ::prost::alloc::string::String,
}
/// Nested message and enum types in `ProcessingControl`.
pub mod processing_control {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ControlType {
        Pause = 0,
        Resume = 1,
        Stop = 2,
        /// Force processing of buffered facts
        Flush = 3,
    }
    impl ControlType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Pause => "CONTROL_TYPE_PAUSE",
                Self::Resume => "CONTROL_TYPE_RESUME",
                Self::Stop => "CONTROL_TYPE_STOP",
                Self::Flush => "CONTROL_TYPE_FLUSH",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CONTROL_TYPE_PAUSE" => Some(Self::Pause),
                "CONTROL_TYPE_RESUME" => Some(Self::Resume),
                "CONTROL_TYPE_STOP" => Some(Self::Stop),
                "CONTROL_TYPE_FLUSH" => Some(Self::Flush),
                _ => None,
            }
        }
    }
}
/// Single-call alternative with rules validation
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProcessWithRulesRequest {
    #[prost(message, repeated, tag = "1")]
    pub rules: ::prost::alloc::vec::Vec<Rule>,
    #[prost(message, repeated, tag = "2")]
    pub facts: ::prost::alloc::vec::Vec<Fact>,
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub options: ::core::option::Option<ProcessingOptions>,
    /// If true, only validate rules without processing facts
    #[prost(bool, tag = "5")]
    pub validate_rules_only: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProcessingResponse {
    #[prost(oneof = "processing_response::Response", tags = "1, 2, 3, 4")]
    pub response: ::core::option::Option<processing_response::Response>,
}
/// Nested message and enum types in `ProcessingResponse`.
pub mod processing_response {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Response {
        /// First response: rules compilation result
        #[prost(message, tag = "1")]
        RulesCompiled(super::CompileRulesResponse),
        /// Subsequent responses: fact processing results
        #[prost(message, tag = "2")]
        ExecutionResult(super::RuleExecutionResult),
        /// Status updates during processing
        #[prost(message, tag = "3")]
        StatusUpdate(super::ProcessingStatus),
        /// Final response
        #[prost(message, tag = "4")]
        Completion(super::ProcessingComplete),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProcessingComplete {
    #[prost(string, tag = "1")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub total_facts_processed: i32,
    #[prost(int32, tag = "3")]
    pub total_results_generated: i32,
    #[prost(int64, tag = "4")]
    pub total_processing_time_ms: i64,
    #[prost(bool, tag = "5")]
    pub success: bool,
    #[prost(string, tag = "6")]
    pub error_message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthResponse {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub uptime_seconds: i64,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SimpleOperator {
    Equal = 0,
    NotEqual = 1,
    GreaterThan = 2,
    LessThan = 3,
    GreaterThanOrEqual = 4,
    LessThanOrEqual = 5,
    Contains = 6,
    StartsWith = 7,
    EndsWith = 8,
}
impl SimpleOperator {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Equal => "SIMPLE_OPERATOR_EQUAL",
            Self::NotEqual => "SIMPLE_OPERATOR_NOT_EQUAL",
            Self::GreaterThan => "SIMPLE_OPERATOR_GREATER_THAN",
            Self::LessThan => "SIMPLE_OPERATOR_LESS_THAN",
            Self::GreaterThanOrEqual => "SIMPLE_OPERATOR_GREATER_THAN_OR_EQUAL",
            Self::LessThanOrEqual => "SIMPLE_OPERATOR_LESS_THAN_OR_EQUAL",
            Self::Contains => "SIMPLE_OPERATOR_CONTAINS",
            Self::StartsWith => "SIMPLE_OPERATOR_STARTS_WITH",
            Self::EndsWith => "SIMPLE_OPERATOR_ENDS_WITH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SIMPLE_OPERATOR_EQUAL" => Some(Self::Equal),
            "SIMPLE_OPERATOR_NOT_EQUAL" => Some(Self::NotEqual),
            "SIMPLE_OPERATOR_GREATER_THAN" => Some(Self::GreaterThan),
            "SIMPLE_OPERATOR_LESS_THAN" => Some(Self::LessThan),
            "SIMPLE_OPERATOR_GREATER_THAN_OR_EQUAL" => Some(Self::GreaterThanOrEqual),
            "SIMPLE_OPERATOR_LESS_THAN_OR_EQUAL" => Some(Self::LessThanOrEqual),
            "SIMPLE_OPERATOR_CONTAINS" => Some(Self::Contains),
            "SIMPLE_OPERATOR_STARTS_WITH" => Some(Self::StartsWith),
            "SIMPLE_OPERATOR_ENDS_WITH" => Some(Self::EndsWith),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LogicalOperator {
    And = 0,
    Or = 1,
    Not = 2,
}
impl LogicalOperator {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::And => "LOGICAL_OPERATOR_AND",
            Self::Or => "LOGICAL_OPERATOR_OR",
            Self::Not => "LOGICAL_OPERATOR_NOT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LOGICAL_OPERATOR_AND" => Some(Self::And),
            "LOGICAL_OPERATOR_OR" => Some(Self::Or),
            "LOGICAL_OPERATOR_NOT" => Some(Self::Not),
            _ => None,
        }
    }
}
/// Generated server implementations.
pub mod rules_engine_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with RulesEngineServiceServer.
    #[async_trait]
    pub trait RulesEngineService: std::marker::Send + std::marker::Sync + 'static {
        /// Two-phase processing: compile rules first, then stream facts
        async fn compile_rules(
            &self,
            request: tonic::Request<super::CompileRulesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CompileRulesResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the ProcessFactsStream method.
        type ProcessFactsStreamStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::RuleExecutionResult, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn process_facts_stream(
            &self,
            request: tonic::Request<tonic::Streaming<super::ProcessFactsStreamRequest>>,
        ) -> std::result::Result<
            tonic::Response<Self::ProcessFactsStreamStream>,
            tonic::Status,
        >;
        /// Server streaming response type for the ProcessWithRulesStream method.
        type ProcessWithRulesStreamStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::ProcessingResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// Alternative: single-call with rules validation before fact streaming
        async fn process_with_rules_stream(
            &self,
            request: tonic::Request<super::ProcessWithRulesRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::ProcessWithRulesStreamStream>,
            tonic::Status,
        >;
        /// Server streaming response type for the ProcessFactsBatch method.
        type ProcessFactsBatchStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::ProcessingStatus, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// Batch processing with status updates
        async fn process_facts_batch(
            &self,
            request: tonic::Request<super::ProcessFactsRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::ProcessFactsBatchStream>,
            tonic::Status,
        >;
        /// Server streaming response type for the EvaluateRulesetStream method.
        type EvaluateRulesetStreamStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::RuleExecutionResult, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// Cached ruleset processing (streaming)
        async fn evaluate_ruleset_stream(
            &self,
            request: tonic::Request<super::EvaluateRulesetRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::EvaluateRulesetStreamStream>,
            tonic::Status,
        >;
        /// Ruleset management
        async fn register_ruleset(
            &self,
            request: tonic::Request<super::RegisterRulesetRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegisterRulesetResponse>,
            tonic::Status,
        >;
        /// Health check
        async fn health_check(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<tonic::Response<super::HealthResponse>, tonic::Status>;
    }
    /// Main service definition
    #[derive(Debug)]
    pub struct RulesEngineServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> RulesEngineServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for RulesEngineServiceServer<T>
    where
        T: RulesEngineService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/rules_engine.v1.RulesEngineService/CompileRules" => {
                    #[allow(non_camel_case_types)]
                    struct CompileRulesSvc<T: RulesEngineService>(pub Arc<T>);
                    impl<
                        T: RulesEngineService,
                    > tonic::server::UnaryService<super::CompileRulesRequest>
                    for CompileRulesSvc<T> {
                        type Response = super::CompileRulesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CompileRulesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RulesEngineService>::compile_rules(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CompileRulesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rules_engine.v1.RulesEngineService/ProcessFactsStream" => {
                    #[allow(non_camel_case_types)]
                    struct ProcessFactsStreamSvc<T: RulesEngineService>(pub Arc<T>);
                    impl<
                        T: RulesEngineService,
                    > tonic::server::StreamingService<super::ProcessFactsStreamRequest>
                    for ProcessFactsStreamSvc<T> {
                        type Response = super::RuleExecutionResult;
                        type ResponseStream = T::ProcessFactsStreamStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::ProcessFactsStreamRequest>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RulesEngineService>::process_facts_stream(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ProcessFactsStreamSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rules_engine.v1.RulesEngineService/ProcessWithRulesStream" => {
                    #[allow(non_camel_case_types)]
                    struct ProcessWithRulesStreamSvc<T: RulesEngineService>(pub Arc<T>);
                    impl<
                        T: RulesEngineService,
                    > tonic::server::ServerStreamingService<
                        super::ProcessWithRulesRequest,
                    > for ProcessWithRulesStreamSvc<T> {
                        type Response = super::ProcessingResponse;
                        type ResponseStream = T::ProcessWithRulesStreamStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ProcessWithRulesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RulesEngineService>::process_with_rules_stream(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ProcessWithRulesStreamSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rules_engine.v1.RulesEngineService/ProcessFactsBatch" => {
                    #[allow(non_camel_case_types)]
                    struct ProcessFactsBatchSvc<T: RulesEngineService>(pub Arc<T>);
                    impl<
                        T: RulesEngineService,
                    > tonic::server::ServerStreamingService<super::ProcessFactsRequest>
                    for ProcessFactsBatchSvc<T> {
                        type Response = super::ProcessingStatus;
                        type ResponseStream = T::ProcessFactsBatchStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ProcessFactsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RulesEngineService>::process_facts_batch(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ProcessFactsBatchSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rules_engine.v1.RulesEngineService/EvaluateRulesetStream" => {
                    #[allow(non_camel_case_types)]
                    struct EvaluateRulesetStreamSvc<T: RulesEngineService>(pub Arc<T>);
                    impl<
                        T: RulesEngineService,
                    > tonic::server::ServerStreamingService<
                        super::EvaluateRulesetRequest,
                    > for EvaluateRulesetStreamSvc<T> {
                        type Response = super::RuleExecutionResult;
                        type ResponseStream = T::EvaluateRulesetStreamStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EvaluateRulesetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RulesEngineService>::evaluate_ruleset_stream(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = EvaluateRulesetStreamSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rules_engine.v1.RulesEngineService/RegisterRuleset" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterRulesetSvc<T: RulesEngineService>(pub Arc<T>);
                    impl<
                        T: RulesEngineService,
                    > tonic::server::UnaryService<super::RegisterRulesetRequest>
                    for RegisterRulesetSvc<T> {
                        type Response = super::RegisterRulesetResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RegisterRulesetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RulesEngineService>::register_ruleset(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RegisterRulesetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rules_engine.v1.RulesEngineService/HealthCheck" => {
                    #[allow(non_camel_case_types)]
                    struct HealthCheckSvc<T: RulesEngineService>(pub Arc<T>);
                    impl<T: RulesEngineService> tonic::server::UnaryService<()>
                    for HealthCheckSvc<T> {
                        type Response = super::HealthResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RulesEngineService>::health_check(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = HealthCheckSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for RulesEngineServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "rules_engine.v1.RulesEngineService";
    impl<T> tonic::server::NamedService for RulesEngineServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
